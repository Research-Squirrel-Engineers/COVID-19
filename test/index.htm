<!DOCTYPE html>
<meta charset="utf-8">
<html>

<head>
    <link rel="stylesheet" type="text/css" href="http://143.93.113.149/css/vendor/bootstrap.min.css" />
    <script src="http://143.93.113.149/js/vendor/jquery-3.1.1.min.js"></script>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/series-label.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
    <link rel="stylesheet" href="dark-unica.css">
    <style>
        body {
            background-color: #1d1d1d;
            color: white;
            font-family: 'Unica One', sans-serif !important;
        }

        .highcharts-figure,
        .highcharts-data-table table {
            min-width: 310px;
            max-width: 800px;
            margin: 1em auto;
        }

        .highcharts-data-table table {
            font-family: Verdana, sans-serif;
            border-collapse: collapse;

            margin: 10px auto;
            text-align: center;
            width: 100%;
            max-width: 500px;
        }

        .highcharts-data-table caption {
            padding: 1em 0;
            font-size: 1.2em;
        }

        .highcharts-data-table th {
            font-weight: 600;
            padding: 0.5em;
        }

        .highcharts-data-table td,
        .highcharts-data-table th,
        .highcharts-data-table caption {
            padding: 0.5em;
        }

        button,
        input,
        optgroup,
        select,
        textarea {
            color: black !important;
        }

        h1 {
            font-weight: 700;
        }

        label {
            font-weight: normal !important;
        }
    </style>

</head>

<body>
    <h1>
        <center>Linked COVID-19 Data</center>
    </h1>
    <h2>
        <center>
            <label for="country">choose a country:</label>
            <select id="inp-country">
                <option value="Germany" selected>Germany</option>
                <option value="Italy">Italy</option>
                <option value="Spain">Spain</option>
                <option value="China">China</option>
                <option value="United_Kingdom">United Kingdom</option>
                <option value="United_States">United States</option>
            </select>
        </center>
    </h2>
    <figure class="highcharts-figure">
        <div id="containerJHU"></div>
        <p class="highcharts-description"></p>
    </figure>
    <figure class="highcharts-figure">
        <div id="containerECDC"></div>
        <p class="highcharts-description"></p>
    </figure>
    <script>
        let JHU_INIT =
            "PREFIX covid19: <http://covid19.squirrel.link/ontology#> PREFIX world: <http://world.squirrel.link/ontology#> PREFIX geosparql: <http://www.opengis.net/ont/geosparql#> SELECT ?item ?date ?c ?d ?r WHERE { ?item a covid19:JHU_Dataset. ?item covid19:date ?date. ?item covid19:confirmed ?c. OPTIONAL {?item covid19:deaths ?d.} OPTIONAL {?item covid19:recovered ?r.} ?item covid19:country ?country. FILTER(?country = world:#COUNTRY#) } ORDER BY DESC(?date)"
        let ECDC_INIT =
            "PREFIX covid19: <http://covid19.squirrel.link/ontology#> PREFIX world: <http://world.squirrel.link/ontology#> PREFIX geosparql: <http://www.opengis.net/ont/geosparql#> SELECT ?item ?date ?c ?d ?r WHERE { ?item a covid19:ECDC_Dataset. ?item covid19:date ?date. ?item covid19:confirmed ?c. OPTIONAL {?item covid19:deaths ?d.} OPTIONAL {?item covid19:recovered ?r.} ?item covid19:country ?country. FILTER(?country = world:#COUNTRY#) } ORDER BY ASC(?date)"
        let JHU =
            "PREFIX covid19: <http://covid19.squirrel.link/ontology#> PREFIX world: <http://world.squirrel.link/ontology#> PREFIX geosparql: <http://www.opengis.net/ont/geosparql#> SELECT ?item ?date ?c ?d ?r WHERE { ?item a covid19:JHU_Dataset. ?item covid19:date ?date. ?item covid19:confirmed ?c. OPTIONAL {?item covid19:deaths ?d.} OPTIONAL {?item covid19:recovered ?r.} ?item covid19:country ?country. FILTER(?country = world:#COUNTRY#) } ORDER BY DESC(?date)"
        let ECDC =
            "PREFIX covid19: <http://covid19.squirrel.link/ontology#> PREFIX world: <http://world.squirrel.link/ontology#> PREFIX geosparql: <http://www.opengis.net/ont/geosparql#> SELECT ?item ?date ?c ?d ?r WHERE { ?item a covid19:ECDC_Dataset. ?item covid19:date ?date. ?item covid19:confirmed ?c. OPTIONAL {?item covid19:deaths ?d.} OPTIONAL {?item covid19:recovered ?r.} ?item covid19:country ?country. FILTER(?country = world:#COUNTRY#) } ORDER BY ASC(?date)"
        var queryStore = function(query, callback) {
            $.ajax({
                url: "https://java-dev.rgzm.de/rdf4j-server/repositories/corona",
                //url: "https://sandbox.mainzed.org/covid19/",
                dataType: 'jsonp',
                type: 'GET',
                data: {
                    queryLn: 'SPARQL',
                    query: query,
                    Accept: 'application/json'
                },
                success: function(data) {
                    var bindings = data.results.bindings;
                    for (var i in bindings) {
                        for (var j in bindings[i]) {
                            if (bindings[i][j].value)
                                bindings[i][j] = bindings[i][j].value;
                        }
                    }
                    callback(bindings);
                },
                error: function(data) {
                    console.log("Es ist ein Fehler aufgetreten: " + data);
                    callback([]);
                }
            });
        };
        let confirmed = [];
        let recovered = [];
        let deaths = [];
        let transformDataJHU = (bindings) => {
            console.log(bindings);
            confirmed = [];
            recovered = [];
            deaths = [];
            for (var i in bindings) {
                //console.log(bindings[i]['date'], bindings[i]['c']);
                let tmpArrC = [];
                tmpArrC.push(new Date(bindings[i]['date']).getTime());
                tmpArrC.push(parseInt(bindings[i]['c']));
                confirmed.push(tmpArrC);
                let tmpArrD = [];
                tmpArrD.push(new Date(bindings[i]['date']).getTime());
                tmpArrD.push(parseInt(bindings[i]['d']));
                deaths.push(tmpArrD);
                let tmpArrR = [];
                tmpArrR.push(new Date(bindings[i]['date']).getTime());
                tmpArrR.push(parseInt(bindings[i]['r']));
                recovered.push(tmpArrR);
            }
            createChart1(confirmed, deaths, recovered, "containerJHU", 'JHU Data');
        };
        let transformDataECDC = (bindings) => {
            console.log(bindings);
            confirmed = [];
            recovered = [];
            deaths = [];
            let sumC = 0;
            let sumD = 0;
            for (var i in bindings) {
                //console.log(bindings[i]['date'], bindings[i]['c']);
                let tmpArrC = [];
                tmpArrC.push(new Date(bindings[i]['date']).getTime());
                sumC = sumC + parseInt(bindings[i]['c']);
                tmpArrC.push(sumC);
                confirmed.push(tmpArrC);
                let tmpArrD = [];
                tmpArrD.push(new Date(bindings[i]['date']).getTime());
                sumD = sumD + parseInt(bindings[i]['d']);
                tmpArrD.push(sumD);
                deaths.push(tmpArrD);
                recovered = [];
            }
            createChart1(confirmed, deaths, recovered, "containerECDC", 'ECDC Data');
        };
        $("#inp-country").change(function() {
            JHU = JHU.replace("#COUNTRY#", $("#inp-country").val());
            ECDC = ECDC.replace("#COUNTRY#", $("#inp-country").val());
            queryStore(JHU, transformDataJHU);
            queryStore(ECDC, transformDataECDC);
            JHU = JHU_INIT;
            ECDC = ECDC_INIT;
        }).trigger("change");
        // highcharts
        let createChart1 = (confirmed, deaths, recovered, container, title) => {
            let subtitletext = $("#inp-country option:selected").text();
            Highcharts.chart(container, {
                chart: {
                    type: 'spline'
                },
                title: {
                    text: title
                },
                subtitle: {
                    text: subtitletext
                },
                xAxis: {
                    type: 'datetime',
                    dateTimeLabelFormats: { // don't display the dummy year
                        month: '%e. %b',
                        year: '%b'
                    },
                    title: {
                        text: 'Date'
                    }
                },
                yAxis: {
                    //type: 'logarithmic',
                    title: {
                        text: 'cases'
                    },
                    min: 1
                },
                tooltip: {
                    headerFormat: '<b>{series.name}</b><br>',
                    pointFormat: '{point.x:%e. %b}: {point.y}'
                },
                plotOptions: {
                    series: {
                        marker: {
                            enabled: false
                        }
                    }
                },
                colors: ['#6495ed', '#abf737', '#d80000'],
                series: [{
                    name: "confirmed",
                    data: confirmed
                }, {
                    name: "recovered",
                    data: recovered
                }, {
                    name: "deaths",
                    data: deaths
                }],
                responsive: {
                    rules: [{
                        condition: {
                            maxWidth: 500
                        },
                        chartOptions: {
                            plotOptions: {
                                series: {
                                    marker: {
                                        radius: 2.5
                                    }
                                }
                            }
                        }
                    }]
                }
            });
        };
    </script>
</body>

</html>