<!DOCTYPE html>
<meta charset="utf-8">
<html>

<head>
    <script src="http://143.93.113.149/js/vendor/jquery-3.1.1.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js" integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew==" crossorigin=""></script>
    <script src="https://unpkg.com/terraformer@1.0.7"></script>
    <script src="https://unpkg.com/terraformer-wkt-parser@1.1.2"></script>
    <link rel="stylesheet" href="dark-unica.css">
    <link rel="stylesheet" type="text/css" href="http://143.93.113.149/css/vendor/bootstrap.min.css" />
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css" integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==" crossorigin="" />
    <title>Linked COVID-19 Data</title>
    <style>
        body {
            background-color: #1d1d1d;
            color: white;
            font-family: 'Unica One', sans-serif !important;
        }

        h1 {
            font-weight: 700;
        }

        label {
            font-weight: normal !important;
        }

        button,
        input,
        optgroup,
        select,
        textarea {
            color: black !important;
        }

        #ui-datepicker-div {
            z-index: 1000000 !important;
        }
        #datepicker {
            width: 162px !important;
            cursor: context-menu;
        }

        .wrapper {
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        #header {
            height: 100px;
            margin-top: 0px !important;
            margin-bottom: 0px !important;
            width: 100%;
        }

        #mapid {
            height: calc(100% - 230px);
            width: 100%;
            flex: 1;
        }

        #footer {
            height: 80px;
            margin-top: 0px !important;
            margin-bottom: 0px !important;
            width: 100%;
        }
    </style>

</head>

<body>
    <div class="wrapper">
        <div id="header">
            <center style="font-size:36px; font-weight:700;">Linked COVID-19 Data</center>
            <p>
                <center>
                    choose a date: <input type="text" id="datepicker">
                    &nbsp;&nbsp;
                    <label for="inp-date">choose a visualisation:</label>
                    <select id="inp-style">
                        <option value="total" selected>total cases</option>
                        <option value="active">active cases</option>
                        <option value="pperc">cases per inhabitants</option>
                        <option value="pperd">deaths per inhabitants</option>
                    </select>
                </center>
            </p>
        </div>
        <div id="mapid"></div>
        <div id="footer">
            <h4>
                <center>Credits: Research Squirrel Engineers, Florian Thiery M.Sc.</center>
            </h4>
            <h5>
                <center>Data: Robert Koch Institute</center>
                <center>via <a href="https://github.com/Research-Squirrel-Engineers/COVID-19/tree/master/ttl" target="_blank">github.com/Research-Squirrel-Engineers/COVID-19</a></center>
            </h5>
        </div>
    </div>
    <script>
        let JHU =
            "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX covid19: <http://covid19.squirrel.link/ontology#> PREFIX world: <http://world.squirrel.link/ontology#> PREFIX geosparql: <http://www.opengis.net/ont/geosparql#> PREFIX owl: <http://www.w3.org/2002/07/owl#> SELECT ?label ?confirmed ?recovered ?deaths ?wikidataQ WHERE { ?dataset a covid19:RKI_Dataset_FS_CUM. ?dataset covid19:bundesland ?item. ?dataset covid19:date '##DATE##'. ?dataset covid19:confirmed ?confirmed. ?dataset covid19:recovered ?recovered. ?dataset covid19:deaths ?deaths. ?item geosparql:hasGeometry ?item_geom . ?item rdfs:label ?label. ?item owl:sameAs ?wikidataQ. } ORDER BY ASC(?label)";
        let JHU0 =
            "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX covid19: <http://covid19.squirrel.link/ontology#> PREFIX world: <http://world.squirrel.link/ontology#> PREFIX geosparql: <http://www.opengis.net/ont/geosparql#> PREFIX owl: <http://www.w3.org/2002/07/owl#> SELECT ?label ?confirmed ?recovered ?deaths ?wikidataQ WHERE { ?dataset a covid19:RKI_Dataset_FS_CUM. ?dataset covid19:bundesland ?item. ?dataset covid19:date '##DATE##'. ?dataset covid19:confirmed ?confirmed. ?dataset covid19:recovered ?recovered. ?dataset covid19:deaths ?deaths. ?item geosparql:hasGeometry ?item_geom . ?item rdfs:label ?label. ?item owl:sameAs ?wikidataQ. } ORDER BY ASC(?label)";
        $("#datepicker").datepicker({
            dateFormat: "yy/mm/dd 00:00:00"
        });
        $("#datepicker").datepicker("setDate", new Date(2020, 03, 28))
        var queryStore = function(query, callback) {
            //console.log(query);
            $.ajax({
                url: "https://sandbox.mainzed.org/covid19/sparql",
                dataType: 'jsonp',
                type: 'GET',
                data: {
                    queryLn: 'SPARQL',
                    query: query,
                    Accept: 'application/json'
                },
                success: function(data) {
                    var bindings = data.results.bindings;
                    //console.log(bindings);
                    for (var i in bindings) {
                        for (var j in bindings[i]) {
                            if (bindings[i][j].value)
                                bindings[i][j] = bindings[i][j].value;
                        }
                    }
                    callback(bindings);
                },
                error: function(data) {
                    console.log("Es ist ein Fehler aufgetreten: " + data);
                    callback([]);
                }
            });
        };
        var queryWikidata = function(query, callback, bindings2) {
            $.ajax({
                url: "https://query.wikidata.org/sparql",
                dataType: 'json',
                ascnc: false,
                type: 'GET',
                data: {
                    queryLn: 'SPARQL',
                    query: query,
                    Accept: 'application/json'
                },
                success: function(data) {
                    var bindings = data.results.bindings;
                    for (var i in bindings) {
                        for (var j in bindings[i]) {
                            if (bindings[i][j].value)
                                bindings[i][j] = bindings[i][j].value;
                        }
                    }
                    callback(bindings, bindings2);
                },
                error: function(data) {
                    console.log("Es ist ein Fehler aufgetreten: " + data);
                }
            });
        };
        let wikidataGeoms = (bindings) => {
            let cList = [];
            let cStr = "";
            for (var i in bindings) {
                cList.push(bindings[i]['wikidataQ']);
            }
            //console.log(cList);
            for (var i in cList) {
                cStr += cList[i].replace("http://www.wikidata.org/entity/", "wd:") + ",";
            }
            cStr = cStr.substring(0, cStr.length - 1);
            //console.log(cStr);
            let WDQ = "SELECT * WHERE { ?state wdt:P625 ?point; wdt:P1082 ?population. ?state rdfs:label ?statelabel filter (lang(?statelabel) = 'en'). FILTER(?state IN (" + cStr + ")) }";
            //console.log(WDQ);
            queryWikidata(WDQ, createMap2, bindings);
        };

        function round(wert, dez) {
            wert = parseFloat(wert);
            if (!wert) return 0;
            dez = parseInt(dez);
            if (!dez) dez = 0;
            var umrechnungsfaktor = Math.pow(10, dez);
            return Math.round(wert * umrechnungsfaktor) / umrechnungsfaktor;
        }
        // map
        var mymap;
        let createMap0 = () => {
            mymap = L.map('mapid').setView([51.163361, 10.447683], 5);
        };
        let createMap2 = (bindings, bindings2) => {
            mymap.eachLayer(function(layer) {
                mymap.removeLayer(layer);
            });
            L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-background/{z}/{x}/{y}{r}.{ext}', {
                attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                subdomains: 'abcd',
                minZoom: 0,
                maxZoom: 20,
                ext: 'png'
            }).addTo(mymap);
            let points = [];
            for (var i in bindings) {
                for (var ii in bindings2) {
                    if (bindings2[ii].wikidataQ === bindings[i].state) {
                        let c = parseInt(bindings2[ii]['confirmed']);
                        let d = parseInt(bindings2[ii]['deaths']);
                        let p = parseInt(bindings[i]['population']);
                        let a = parseInt(bindings2[ii]['confirmed']) - parseInt(bindings2[ii]['recovered']) - parseInt(bindings2[ii]['deaths']);
                        let cpi = (100 / p * c);
                        let dpi = (100 / p * d);
                        cpi = round(cpi, 2);
                        dpi = round(dpi, 4);
                        let total = {
                            radius: c * 1.5,
                            fillColor: "#ff7800",
                            color: "#000",
                            weight: 1,
                            opacity: 1,
                            fillOpacity: 0.8
                        };
                        let active = {
                            radius: a * 3.0,
                            fillColor: "#bbbbbb",
                            color: "#000",
                            weight: 1,
                            opacity: 1,
                            fillOpacity: 0.8
                        };
                        let pperc = {
                            radius: cpi * 100000,
                            fillColor: "#00FF7F",
                            color: "#000",
                            weight: 1,
                            opacity: 1,
                            fillOpacity: 0.8
                        };
                        let pperd = {
                            radius: dpi * 2500000,
                            fillColor: "#DC143C",
                            color: "#000",
                            weight: 1,
                            opacity: 1,
                            fillOpacity: 0.8
                        };
                        wkt = bindings[i]['point'].replace("Point", "POINT");
                        geojson = Terraformer.WKT.parse(wkt);
                        let l = L.geoJSON(geojson, {
                            pointToLayer: function(feature, latlng) {
                                let style = null;
                                if ($("#inp-style option:selected").val() === "total") {
                                    style = total;
                                } else if ($("#inp-style option:selected").val() === "pperc") {
                                    style = pperc;
                                } else if ($("#inp-style option:selected").val() === "pperd") {
                                    style = pperd;
                                } else if ($("#inp-style option:selected").val() === "active") {
                                    style = active;
                                }
                                return L.circle(latlng, style);
                            }
                        }).addTo(mymap);
                        points.push(l);
                        l.bindPopup("<b>" + bindings[i]['statelabel'] + "</b><br>cases: " + c + "</b><br>active: " + a + "<br>population: " + p + "<br>cases[%]: " + cpi + "<br>deaths[%]: " + dpi + "<br><a href='" + bindings[i]['state'] +
                            "' target='_blank'>" + bindings[i]['state'].replace("http://www.wikidata.org/entity/", "wd:") + "</a>");
                    }
                }
            }
            var group = new L.featureGroup(points);
            mymap.fitBounds(group.getBounds());
        };
        createMap0();
        $("#inp-style").change(function() {
            JHU = JHU0;
            JHU = JHU.replace("##DATE##", $("#datepicker").val());
            queryStore(JHU, wikidataGeoms);
        }).trigger("change");
        $("#datepicker").change(function() {
            JHU = JHU0;
            JHU = JHU.replace("##DATE##", $("#datepicker").val());
            queryStore(JHU, wikidataGeoms);
        }).trigger("change");
    </script>
</body>

</html>