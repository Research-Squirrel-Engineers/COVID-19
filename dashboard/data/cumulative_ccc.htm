<!DOCTYPE html>
<meta charset="utf-8">
<html>

<head>
    <link rel="stylesheet" type="text/css" href="http://143.93.113.149/css/vendor/bootstrap.min.css" />
    <script src="http://143.93.113.149/js/vendor/jquery-3.1.1.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css" integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==" crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js" integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew==" crossorigin=""></script>
    <script src="https://unpkg.com/terraformer@1.0.7"></script>
    <script src="https://unpkg.com/terraformer-wkt-parser@1.1.2"></script>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/series-label.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
    <link rel="stylesheet" href="dark-unica.css">
    <title>Linked COVID-19 Data</title>
    <style>
        body {
            background-color: #1d1d1d;
            color: white;
            font-family: 'Unica One', sans-serif !important;
        }

        .highcharts-figure,
        .highcharts-data-table table {
            min-width: 310px;
            max-width: 800px;
            margin: 1em auto;
        }

        .highcharts-data-table table {
            font-family: Verdana, sans-serif;
            border-collapse: collapse;

            margin: 10px auto;
            text-align: center;
            width: 100%;
            max-width: 500px;
        }

        .highcharts-data-table caption {
            padding: 1em 0;
            font-size: 1.2em;
        }

        .highcharts-data-table th {
            font-weight: 600;
            padding: 0.5em;
        }

        .highcharts-data-table td,
        .highcharts-data-table th,
        .highcharts-data-table caption {
            padding: 0.5em;
        }

        button,
        input,
        optgroup,
        select,
        textarea {
            color: black !important;
        }

        h1 {
            font-weight: 700;
        }

        label {
            font-weight: normal !important;
        }

        #mapid {
            height: 500px;
            min-width: 310px;
            max-width: 800px;
            margin: 1em auto;
        }
    </style>

</head>

<body>
    <h1>
        <center>Linked COVID-19 Data</center>
    </h1>
    <h5>
        <center>
            <label for="inp-scale">choose a diagram scale:</label>
            <select id="inp-scale">
                <option value="linear" selected>linear</option>
                <option value="logarithmic">logarithmic</option>
            </select>
        </center>
    </h5>
    <figure class="highcharts-figure">
        <div id="containerJHU"></div>
        <p class="highcharts-description"></p>
    </figure>
    <div id="mapid"></div>
    <figure class="highcharts-figure">
        <div id="containerECDC"></div>
        <p class="highcharts-description"></p>
    </figure>
    <hr width="80%">
    <h4>
        <center>Credits: Research Squirrel Engineers, Florian Thiery M.Sc. /CC BY 4.0</center>
    </h4>
    <h5>
        <center>Data: Johns Hopkins University and European Centre for Disease Prevention and Control</center>
        <center>via <a href="https://github.com/Research-Squirrel-Engineers/COVID-19/tree/master/ttl" target="_blank">github.com/Research-Squirrel-Engineers/COVID-19</a></center>
    </h5>
    <script>
        let JHU =
            "PREFIX covid19: <http://covid19.squirrel.link/ontology#> PREFIX world: <http://world.squirrel.link/ontology#> PREFIX geosparql: <http://www.opengis.net/ont/geosparql#> SELECT ?item ?date ?c ?country WHERE { ?item a covid19:JHU_Dataset. ?item covid19:date ?date. ?item covid19:confirmed ?c. ?item covid19:country ?country. FILTER(?country IN (world:Germany,world:Italy,world:France,world:United_States,world:United_Kingdom,world:Spain,world:Austria,world:Sweden,world:China)) } ORDER BY ASC(?date)";
        let GEOMQUERY =
            "PREFIX covid19: <http://covid19.squirrel.link/ontology#> PREFIX world: <http://world.squirrel.link/ontology#> PREFIX geosparql: <http://www.opengis.net/ont/geosparql#> SELECT DISTINCT ?wkt_geom ?country WHERE { ?item a covid19:JHU_Dataset. ?item covid19:country ?country. ?country geosparql:hasGeometry ?item_geom . ?item_geom geosparql:asWKT ?wkt_geom . FILTER(?country IN (world:Germany,world:Italy,world:France,world:United_States,world:United_Kingdom,world:Spain,world:Austria,world:Sweden,world:China)) }";
        let ECDC =
            "PREFIX covid19: <http://covid19.squirrel.link/ontology#> PREFIX world: <http://world.squirrel.link/ontology#> PREFIX geosparql: <http://www.opengis.net/ont/geosparql#> SELECT ?item ?date ?c ?country WHERE { ?item a covid19:ECDC_Dataset. ?item covid19:date ?date. ?item covid19:confirmed ?c. ?item covid19:country ?country. FILTER(?country IN (world:Germany,world:Italy,world:France,world:United_States,world:United_Kingdom,world:Spain,world:Austria,world:Sweden,world:China)) } ORDER BY ASC(?date)";
        var queryStore = function(query, callback) {
            $.ajax({
                url: "https://sandbox.mainzed.org/covid19/sparql",
                dataType: 'jsonp',
                type: 'GET',
                data: {
                    queryLn: 'SPARQL',
                    query: query,
                    Accept: 'application/json'
                },
                success: function(data) {
                    var bindings = data.results.bindings;
                    for (var i in bindings) {
                        for (var j in bindings[i]) {
                            if (bindings[i][j].value)
                                bindings[i][j] = bindings[i][j].value;
                        }
                    }
                    callback(bindings);
                },
                error: function(data) {
                    console.log("Es ist ein Fehler aufgetreten: " + data);
                    callback([]);
                }
            });
        };

        function onlyUnique(value, index, self) {
            return self.indexOf(value) === index;
        };

        let confirmed = [];
        let transformDataJHU = (bindings) => {
            console.log(bindings);
            confirmed_Germany = [];
            confirmed_Italy = [];
            confirmed_France = [];
            confirmed_US = [];
            confirmed_UK = [];
            confirmed_Spain = [];
            confirmed_Austria = [];
            confirmed_Sweden = [];
            confirmed_China = [];
            for (var i in bindings) {
                if (bindings[i]['country'] == "http://world.squirrel.link/ontology#Germany") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    tmpArrC.push(parseInt(bindings[i]['c']));
                    confirmed_Germany.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#Italy") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    tmpArrC.push(parseInt(bindings[i]['c']));
                    confirmed_Italy.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#France") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    tmpArrC.push(parseInt(bindings[i]['c']));
                    confirmed_France.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#United_States") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    tmpArrC.push(parseInt(bindings[i]['c']));
                    confirmed_US.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#United_Kingdom") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    tmpArrC.push(parseInt(bindings[i]['c']));
                    confirmed_UK.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#Spain") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    tmpArrC.push(parseInt(bindings[i]['c']));
                    confirmed_Spain.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#Austria") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    tmpArrC.push(parseInt(bindings[i]['c']));
                    confirmed_Austria.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#Sweden") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    tmpArrC.push(parseInt(bindings[i]['c']));
                    confirmed_Sweden.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#China") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    tmpArrC.push(parseInt(bindings[i]['c']));
                    confirmed_China.push(tmpArrC);
                }
            }
            let series = [];
            let s1 = {};
            s1.name = "Germany";
            s1.data = confirmed_Germany;
            series.push(s1);
            let s2 = {};
            s2.name = "Italy";
            s2.data = confirmed_Italy;
            series.push(s2);
            let s3 = {};
            s3.name = "France";
            s3.data = confirmed_France;
            series.push(s3);
            let s4 = {};
            s4.name = "United States";
            s4.data = confirmed_US;
            series.push(s4);
            let s5 = {};
            s5.name = "United Kingdom";
            s5.data = confirmed_UK;
            series.push(s5);
            let s6 = {};
            s6.name = "Spain";
            s6.data = confirmed_Spain;
            series.push(s6);
            let s7 = {};
            s7.name = "Austria";
            s7.data = confirmed_Austria;
            series.push(s7);
            let s8 = {};
            s8.name = "Sweden";
            s8.data = confirmed_Sweden;
            series.push(s8);
            let s9 = {};
            s9.name = "China";
            s9.data = confirmed_China;
            series.push(s9);
            createChart1(series, "containerJHU", 'JHU Data');
        };
        let transformGeoms = (bindings) => {
            console.log(bindings);
            let geoms = [];
            geom = "";
            createMap0();
            for (var i in bindings) {
                geom = bindings[i]['wkt_geom'].replace("<http://www.opengis.net/def/crs/EPSG/0/4326> ", "").replace("^^<http://www.opengis.net/ont/geosparql#wktLiteral>", "");
                geoms.push(geom);
            }
            geoms = geoms.filter(onlyUnique);
            console.log(geoms);
            for (g in geoms) {
                createMap1(geoms[g]);
            }
        };
        let transformDataECDC = (bindings) => {
            console.log(bindings);
            confirmed_Germany = [];
            confirmed_Italy = [];
            confirmed_France = [];
            confirmed_US = [];
            confirmed_UK = [];
            confirmed_Spain = [];
            confirmed_Austria = [];
            confirmed_Sweden = [];
            confirmed_China = [];
            let sumC_Germany = 0;
            let sumC_Italy = 0;
            let sumC_France = 0;
            let sumC_US = 0;
            let sumC_UK = 0;
            let sumC_Spain = 0;
            let sumC_Austria = 0;
            let sumC_Sweden = 0;
            let sumC_China = 0;
            for (var i in bindings) {
                if (bindings[i]['country'] == "http://world.squirrel.link/ontology#Germany") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    sumC_Germany = sumC_Germany + parseInt(bindings[i]['c']);
                    tmpArrC.push(sumC_Germany);
                    confirmed_Germany.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#Italy") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    confirsumC_Italymed_Italy = sumC_Italy + parseInt(bindings[i]['c']);
                    tmpArrC.push(sumC_Italy);
                    confirmed_Italy.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#France") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    sumC_France = sumC_France + parseInt(bindings[i]['c']);
                    tmpArrC.push(sumC_France);
                    confirmed_France.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#United_States") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    sumC_US = sumC_US + parseInt(bindings[i]['c']);
                    tmpArrC.push(sumC_US);
                    confirmed_US.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#United_Kingdom") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    sumC_UK = sumC_UK + parseInt(bindings[i]['c']);
                    tmpArrC.push(sumC_UK);
                    confirmed_UK.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#Spain") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    sumC_Spain = sumC_Spain + parseInt(bindings[i]['c']);
                    tmpArrC.push(sumC_Spain);
                    confirmed_Spain.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#Austria") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    sumC_Austria = sumC_Austria + parseInt(bindings[i]['c']);
                    tmpArrC.push(sumC_Austria);
                    confirmed_Austria.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#Sweden") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    sumC_Sweden = sumC_Sweden + parseInt(bindings[i]['c']);
                    tmpArrC.push(sumC_Sweden);
                    confirmed_Sweden.push(tmpArrC);
                } else if (bindings[i]['country'] == "http://world.squirrel.link/ontology#China") {
                    let tmpArrC = [];
                    tmpArrC.push(new Date(bindings[i]['date']).getTime());
                    sumC_China = sumC_China + parseInt(bindings[i]['c']);
                    tmpArrC.push(sumC_China);
                    confirmed_China.push(tmpArrC);
                }
            }
            let series = [];
            let s1 = {};
            s1.name = "Germany";
            s1.data = confirmed_Germany;
            series.push(s1);
            let s2 = {};
            s2.name = "Italy";
            s2.data = confirmed_Italy;
            series.push(s2);
            let s3 = {};
            s3.name = "France";
            s3.data = confirmed_France;
            series.push(s3);
            let s4 = {};
            s4.name = "United States";
            s4.data = confirmed_US;
            series.push(s4);
            let s5 = {};
            s5.name = "United Kingdom";
            s5.data = confirmed_UK;
            series.push(s5);
            let s6 = {};
            s6.name = "Spain";
            s6.data = confirmed_Spain;
            series.push(s6);
            let s7 = {};
            s7.name = "Austria";
            s7.data = confirmed_Austria;
            series.push(s7);
            let s8 = {};
            s8.name = "Sweden";
            s8.data = confirmed_Sweden;
            series.push(s8);
            let s9 = {};
            s9.name = "China";
            s9.data = confirmed_China;
            series.push(s9);
            createChart1(series, "containerECDC", 'ECDC Data');
        };
        $("#inp-scale").change(function() {
            $("#inp-scale").val();
            queryStore(JHU, transformDataJHU);
            queryStore(ECDC, transformDataECDC);
            queryStore(GEOMQUERY, transformGeoms);
        }).trigger("change");
        // highcharts
        let createChart1 = (series, container, title) => {
            let subtitletext = $("#inp-country option:selected").text();
            Highcharts.chart(container, {
                chart: {
                    type: 'spline'
                },
                title: {
                    text: title
                },
                subtitle: {
                    text: subtitletext
                },
                xAxis: {
                    type: 'datetime',
                    dateTimeLabelFormats: { // don't display the dummy year
                        month: '%e. %b',
                        year: '%b'
                    },
                    title: {
                        text: 'Date'
                    }
                },
                yAxis: {
                    type: $("#inp-scale").val(),
                    title: {
                        text: 'cases'
                    },
                    min: 1
                },
                tooltip: {
                    headerFormat: '<b>{series.name}</b><br>',
                    pointFormat: '{point.x:%e. %b}: {point.y}'
                },
                plotOptions: {
                    series: {
                        marker: {
                            enabled: false
                        }
                    }
                },
                series: series,
                responsive: {
                    rules: [{
                        condition: {
                            maxWidth: 500
                        },
                        chartOptions: {
                            plotOptions: {
                                series: {
                                    marker: {
                                        radius: 2.5
                                    }
                                }
                            }
                        }
                    }]
                }
            });
        };
        // map
        var mymap = L.map('mapid').setView([51.505, -0.09], 2);
        let createMap0 = () => {
            mymap.eachLayer(function(layer) {
                mymap.removeLayer(layer);
            });
            L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-background/{z}/{x}/{y}{r}.{ext}', {
                attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                subdomains: 'abcd',
                minZoom: 0,
                maxZoom: 20,
                ext: 'png'
            }).addTo(mymap);
        };
        let createMap1 = (geom) => {
            var wkt = geom;
            var geojson = Terraformer.WKT.parse(wkt);
            var layer = L.geoJson(geojson, {}).addTo(mymap);
        };
    </script>
</body>

</html>